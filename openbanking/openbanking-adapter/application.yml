#
#    This Source Code Form is subject to the terms of the Mozilla
#    Public License, v. 2.0. If a copy of the MPL was not distributed
#    with this file, You can obtain one at
#
#    https://mozilla.org/MPL/2.0/.
#

debug: true

spring:
  profiles:
    active: in1, dev, fineractx, test # in1/in2, dev/prod, fineractx/fineractcn, test

---
spring:
  profiles: in1

instance: in01
tn1: tn01
tn2: tn02

domain:
  tn1: buffalo.mifos.io
  tn2: lion.mifos.io
---

spring:
  profiles: in2

instance: in02
tn1: tn03
tn2: tn04

domain:
  tn1: rhino.mifos.io
  tn2: elephant.mifos.io
---

# ------------ Spring settings -----------

spring:
  profile: container
  main:
    web-application-type: none
  datasource:
    url: jdbc:mariadb://fineractmysql:3306/ob_${tn1}
    username: root
    password: mysql
    driver-class-name: org.mariadb.jdbc.Driver
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
      dialect: org.hibernate.dialect.MySQLDialect
      jdbc:
        batch_size: 30
        rewriteBatchedStatements: true
        cachePrepStmts: true
        prepStmtCacheSize: 1000
        prepStmtCacheSqlLimit: 1000
        useServerPrepStmts: true
      ejb:
        use_class_enhancer: true
  liquibase:
    enabled: false
    change-log: classpath:/db/liquibase-changelog.yml

---
spring:
  profiles: prod & in1

  datasource:
    url: jdbc:mariadb://fineract.mifos.io:3306/ob_${tn1}
    username: admin
    password: adminadminadmin
---

spring:
  profiles: prod & in2

  datasource:
    url: jdbc:mariadb://fincn.mifos.io:3306/ob_${tn1}
    username: admin
    password: adminadminadmin
---

logging:
  level:
    liquibase: INFO
#    org:
#      springframework:
#        transaction:
#          interceptor: TRACE

management:
  endpoints:
    web:
      exposure:
        include: "*"


# the name of Camel
camel:
  springboot:
    name: AdapterCamel

# ------------ ADAPTER global settings -----------

adapter-settings:
  instance: ${instance}
  schemas: OB # OB (OpenBanking UK), PSD2 (NextGenPsd2)
  tenants:
  - name: ${tn1}
    db-schema: ob_${tn1}
    time-zone: UTC #ZoneId  - TimeZone.getAvailableIDs()
  - name: ${tn2}
    db-schema: ob_${tn2}
    time-zone: UTC

  # default limits, may be overwritten in request
  event-limits: # request must be rejected if any of the limits was reached
    frequency: 100 # per day
#  consent-limits: # consent must be rejected if any of the limits was reached
#    expiration: 36000s #sec = 10h
  payment-limits: # payment is not valid if any of the limits was reached
    expiration: 3600s #sec = 1h
  sca-limits: # new sca is needed if any of the limits was reached
    number: 5
    amounts:
    - currency: TZS
      amount: 10000
    - currency: USD
      amount: 1000
    expiration: 3600 #sec

---
spring:
  profiles: test

adapter-settings:
  env: test # test, prod (default: prod)
---

# ------------ API settings -----------

api-settings:
  cors-enabled: true
  schemas:
    OB:
      permissions: ReadAccountsBasic, ReadAccountsDetail, ReadBalances, ReadTransactionsBasic, ReadTransactionsDetail, ReadTransactionsCredits, ReadTransactionsDebits, ReadParty, ReadPartyPSU
      headers:
      - name: auth-date
        key: x-fapi-auth-date
      - name: customer-ip-address
        key: x-fapi-customer-ip-address
      - name: interaction-id
        key: x-fapi-interaction-id
      - name: transactions_from
        key: fromBookingDateTime
      - name: transactions_to
        key: toBookingDateTime
      bindings: #tpp -> adapter
      - name: binding-basic-settings
        tenants:
        - name: ${tn1}
          port: 62020
        - name: ${tn2}
          port: 62021
        host: http://0.0.0.0 #http://payments.dpc.hu:80
        base: adapter/ob
      - name: ais-consent-create #create AIS TPP consent
        path: account-access-consents
        method: POST
        body-class: hu.dpc.ob.rest.dto.ob.api.AisConsentCreateRequestDto
      - name: ais-consent #get AIS consent
        path: account-access-consents/{consentId}
        method: GET
      - name: ais-consent-delete #delete AIS consent
        path: account-access-consents/{consentId}
        method: DELETE
      - name: accounts #get list of owned accounts
        path: accounts
        method: GET
      - name: account #get owned account details
        path: accounts/{accountId}
        method: GET
      - name: balances #get balances of owned accounts
        path: balances
        method: GET
      - name: balance #get account balance information
        path: accounts/{accountId}/balances
        method: GET
      - name: transactions #get transactions of owned accounts
        path: transactions
        method: GET
      - name: transaction #get account transaction information
        path: /accounts/{accountId}/transactions
        method: GET
      - name: psu-party #get party information on the PSU logged in
        path: party
        method: GET
      - name: account-party #get party information of the account owner
        path: accounts/{accountId}/party
        method: GET

      - name: pis-consent-create
        path: domestic-payment-consents
        method: POST
        body-class: hu.dpc.ob.rest.dto.ob.api.PisConsentCreateRequestDto
      - name: pis-consent
        path: domestic-payment-consents/{consentId}
        method: GET
      - name: funds
        path: domestic-payment-consents/{consentId}/funds-confirmation
        method: GET
      - name: payment-create
        path: domestic-payments
        method: POST
        body-class: hu.dpc.ob.rest.dto.ob.api.PaymentCreateRequestDto
      - name: payment
        path: domestic-payments/{paymentId}
        method: GET
      - name: payment-details
        path: domestic-payments/{paymentId}/payment-details
        method: GET
      - name: client-payment
        path: domestic-payments-client/{clientPaymentId}
        method: GET

# ------------ ACCESS settings -----------

access-settings:
  cors-enabled: false
  schemas:
    schema-basic-settings:
      operations: #adapter -> identity
      - name: operation-basic-settings
        user: admin
        password: admin
        tenants:
        - name: ${tn1}
          host: https://api.${domain.tn1}
        - name: ${tn2}
          host: https://api.${domain.tn2}
      - name: userinfo
        port: 8243
        base:
        path: userinfo
        method: GET
      - name: introspect
        port: 9443
        base: oauth2
        path: introspect
        method: POST
    OB:
      headers:
      - name: user
        key: user-id
      bindings: #identity -> adapter
      - name: binding-basic-settings
        tenants:
        - name: ${tn1}
          port: 63030
        - name: ${tn2}
          port: 63031
        host: http://0.0.0.0
        base: adapter/ob
      - name: ais-consent #get user consent
        path: consents/{consentId}
        method: GET
      - name: consent-party #get user details
        path: consents/{consentId}/party
        method: GET
      - name: consent-accounts #get list of consent accounts
        path: consents/{consentId}/accounts
        method: GET
      - name: ais-consent-update #update user consent
        path: consents/{consentId}
        method: PUT
        body-class: hu.dpc.ob.rest.dto.ob.access.AisConsentUpdateRequestDto
      - name: pis-consent #get user consent
        path: pis-consents/{consentId}
        method: GET
      - name: pis-consent-init #initialize user payment consent
        path: pis-consents/{consentId}
        method: POST
      - name: pis-consent-update #update user payment consent
        path: pis-consents/{consentId}
        method: PUT
        body-class: hu.dpc.ob.rest.dto.ob.access.PisConsentUpdateRequestDto

# ------------ PSP settings -----------

---
psp:
  tn1:
    host: http://localhost
  tn2:
    host: http://localhost
  port: 8080
  base: fineract-provider/api/v1
hub:
  tn1:
    host: http://localhost
  tn2:
    host: http://localhost
  port: 58080
  base: channel
---

spring:
  profiles: dev

hub:
  tn1:
    host: http://${domain.tn1}
  tn2:
    host: http://${domain.tn2}
  port: 80
  base: api
---

spring:
  profiles: prod

psp:
  port: 80
hub:
  port: 80
  base: api
---

spring:
  profiles: fineractx

# Fineract 1.2
psp-settings:
  auth:
    profile: BASIC # NONE, BASIC, BASIC_TWOFACTOR, OAUTH, OAUTH_TWOFACTOR
    encode: NONE # NONE, BASE64
  headers:
  - name: user
    key: User
  - name: tenant
    key: Fineract-Platform-TenantId
  - name: transaction-tenant
    key: X-Tenant-Identifier
  operations: #adapter -> psp
  - name: operation-basic-settings
    user: mifos
    password: password
    tenants:
    - name: ${tn1}
      host: ${psp.tn1.host}
    - name: ${tn2}
      host: ${psp.tn2.host}
    port: ${psp.port}
    base: ${psp.base}
  - name: auth #login
    path: authentication
    method: POST
    body-class: hu.dpc.ob.rest.dto.psp.FineractXLoginResponseDto
  - name: accounts
    path: clients/{clientId}/accounts
    method: GET
  - name: client
    path: clients/{clientId}
    method: GET
  - name: account
    path: interoperation/accounts/{accountId}
    method: GET
  - name: transactions
    path: interoperation/accounts/{accountId}/transactions
    method: GET
  - name: identifiers
    path: interoperation/accounts/{accountId}/identifiers
    method: GET
  - name: party-by-identifier
    path: interoperation/parties/{idType}/{idValue}
    method: GET
  - name: party-by-subidentifier
    path: interoperation/parties/{idType}/{idValue}/{subIdOrType}
    method: GET
  - name: quote-create
    path: interoperation/quotes
    method: POST
  - name: payment-create
    tenants:
    - name: ${tn1}
      host: ${hub.tn1.host}
    - name: ${tn2}
      host: ${hub.tn2.host}
    port: ${hub.port}
    base: ${hub.base}
    path: transactions
    method: POST
  - name: payment #get payment status by transaction id
    tenants:
    - name: ${tn1}
      host: ${hub.tn1.host}
    - name: ${tn2}
      host: ${hub.tn2.host}
    port: ${hub.port}
    base: ${hub.base}
    path: transactions/{transactionId}
    method: GET
---

spring:
  profiles: fineractcn

# Fineract CN
psp-settings:
  auth:
    profile: OAUTH # NONE, BASIC, BASIC_TWOFACTOR, OAUTH, OAUTH_TWOFACTOR
    encode: BASE64 # NONE, BASE64
  headers:
    - name: user
      key: User
    - name: tenant
      key: X-Tenant-Identifier
    - name: transaction-tenant
      key: X-Tenant-Identifier
  operations: #adapter -> psp
    - name: operation-basic-settings
      user: interopUser
      password: intop@d1
      tenants:
        ${tn1}:
          host: http://localhost # http://rhino.mlabs.dpc.hu
        ${tn2}:
          host: http://localhost # http://elephant.mlabs.dpc.hu
      port: 80 #2034
      base:
    - name: auth #login
      port: 80 #2021
      base: identity/v1
      path: token
      method: GET
      body-class: hu.dpc.ob.rest.dto.psp.FineractCnLoginResponseDto

    - name: accounts
      path: clients/{clientId}/accounts
      method: GET
    - name: client
      path: clients/{clientId}
      method: GET

    - name: account
      path: interoperation/v1/accounts/{accountId}
      method: GET
    - name: transactions
      path: interoperation/v1/accounts/{accountId}/transactions
      method: GET
    - name: identifiers
      path: interoperation/v1/accounts/{accountId}/identifiers
      method: GET
    - name: party-by-identifier
      path: interoperation/v1/parties/{idType}/{idValue}
      method: GET
    - name: party-by-subidentifier
      path: interoperation/v1/parties/{idType}/{idValue}/{subIdOrType}
      method: GET
    - name: quote-create
      path: interoperation/v1/quotes
      method: POST


